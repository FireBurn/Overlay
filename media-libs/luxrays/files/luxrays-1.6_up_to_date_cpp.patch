diff -NurB a/include/luxrays/core/utils.h LuxCore-luxrender_v1.6/include/luxrays/core/utils.h
--- a/include/luxrays/core/utils.h	2021-01-28 22:05:27.183286041 +0100
+++ LuxCore-luxrender_v1.6/include/luxrays/core/utils.h	2021-01-28 22:13:48.324302969 +0100
@@ -32,8 +32,9 @@
 #define isnan(a) _isnan(a)
 #define isinf(f) (!_finite((f)))
 #else
-#define isnan(a) std::isnan(a)
-#define isinf(f) std::isinf(f)
+using namespace std;
+//#define isnan(a) std::isnan(a)
+//#define isinf(f) std::isinf(f)
 #endif
 
 #if defined(WIN32)
diff -NurB a/include/luxrays/utils/ocl.h LuxCore-luxrender_v1.6/include/luxrays/utils/ocl.h
--- a/include/luxrays/utils/ocl.h	2021-01-28 22:05:27.182286041 +0100
+++ LuxCore-luxrender_v1.6/include/luxrays/utils/ocl.h	2021-01-28 22:26:41.400329084 +0100
@@ -27,7 +27,7 @@
 
 // To avoid reference to OpenCL 1.2 symbols in cl.hpp file
 #define CL_USE_DEPRECATED_OPENCL_1_1_APIS
-#define __CL_ENABLE_EXCEPTIONS
+#define CL_HPP_ENABLE_EXCEPTIONS
 
 #if defined(__APPLE__)
 #include <OpenCL/cl.hpp>
diff -NurB a/src/slg/imagemap/imagemap.cpp LuxCore-luxrender_v1.6/src/slg/imagemap/imagemap.cpp
--- a/src/slg/imagemap/imagemap.cpp	2021-01-28 22:05:27.265286043 +0100
+++ LuxCore-luxrender_v1.6/src/slg/imagemap/imagemap.cpp	2021-01-28 22:45:31.296367252 +0100
@@ -236,7 +236,7 @@
 template <class T, u_int CHANNELS>
 ImageMapStorage *ImageMapStorageImpl<T, CHANNELS>::Copy() const {
 	const u_int pixelCount = width * height;
-	auto_ptr<ImageMapPixel<T, CHANNELS> > newPixels(new ImageMapPixel<T, CHANNELS>[pixelCount]);
+	unique_ptr<ImageMapPixel<T, CHANNELS> > newPixels(new ImageMapPixel<T, CHANNELS>[pixelCount]);
 
 	const ImageMapPixel<T, CHANNELS> *src = pixels;
 	ImageMapPixel<T, CHANNELS> *dst = newPixels.get();
@@ -268,7 +268,7 @@
 				// Nothing to do
 				return NULL;
 			} else if (CHANNELS == 2) {
-				auto_ptr<ImageMapPixel<T, 1> > newPixels(new ImageMapPixel<T, 1>[pixelCount]);
+				unique_ptr<ImageMapPixel<T, 1> > newPixels(new ImageMapPixel<T, 1>[pixelCount]);
 
 				const ImageMapPixel<T, CHANNELS> *src = pixels;
 				ImageMapPixel<T, 1> *dst = newPixels.get();
@@ -286,7 +286,7 @@
 
 				return new ImageMapStorageImpl<T, 1>(newPixels.release(), width, height);
 			} else {
-				auto_ptr<ImageMapPixel<T, 1> > newPixels(new ImageMapPixel<T, 1>[pixelCount]);
+				unique_ptr<ImageMapPixel<T, 1> > newPixels(new ImageMapPixel<T, 1>[pixelCount]);
 
 				const ImageMapPixel<T, CHANNELS> *src = pixels;
 				ImageMapPixel<T, 1> *dst = newPixels.get();
@@ -309,7 +309,7 @@
 				// Nothing to do
 				return NULL;
 			} else if (CHANNELS == 2) {
-				auto_ptr<ImageMapPixel<T, 1> > newPixels(new ImageMapPixel<T, 1>[pixelCount]);
+				unique_ptr<ImageMapPixel<T, 1> > newPixels(new ImageMapPixel<T, 1>[pixelCount]);
 
 				const ImageMapPixel<T, CHANNELS> *src = pixels;
 				ImageMapPixel<T, 1> *dst = newPixels.get();
@@ -324,7 +324,7 @@
 
 				return new ImageMapStorageImpl<T, 1>(newPixels.release(), width, height);
 			} else {
-				auto_ptr<ImageMapPixel<T, 1> > newPixels(new ImageMapPixel<T, 1>[pixelCount]);
+				unique_ptr<ImageMapPixel<T, 1> > newPixels(new ImageMapPixel<T, 1>[pixelCount]);
 
 				const ImageMapPixel<T, CHANNELS> *src = pixels;
 				ImageMapPixel<T, 1> *dst = newPixels.get();
@@ -354,7 +354,7 @@
 				// Nothing to do
 				return NULL;
 			} else {
-				auto_ptr<ImageMapPixel<T, 3> > newPixels(new ImageMapPixel<T, 3>[pixelCount]);
+				unique_ptr<ImageMapPixel<T, 3> > newPixels(new ImageMapPixel<T, 3>[pixelCount]);
 
 				const ImageMapPixel<T, CHANNELS> *src = pixels;
 				ImageMapPixel<T, 3> *dst = newPixels.get();
@@ -389,7 +389,7 @@
 	else {
 		ImageSpec config;
 		config.attribute ("oiio:UnassociatedAlpha", 1);
-		auto_ptr<ImageInput> in(ImageInput::open(fileName, &config));
+		unique_ptr<ImageInput> in(ImageInput::open(fileName, &config));
 		if (in.get()) {
 			const ImageSpec &spec = in->spec();
 
@@ -575,7 +575,7 @@
 			throw runtime_error("Unsupported storage type in ImageMap::Resize(): " + ToString(storageType));
 	}
 	
-	dest.get_pixels(0, newWidth, 0, newHeight, 0, 1, baseType, pixelStorage->GetPixelsData());
+	dest.get_pixels(ROI(0, newWidth, 0, newHeight, 0, 1), baseType, pixelStorage->GetPixelsData());
 
 	Preprocess();
 }
@@ -600,7 +600,7 @@
 }
 
 void ImageMap::WriteImage(const string &fileName) const {
-	ImageOutput *out = ImageOutput::create(fileName);
+	auto out = ImageOutput::create(fileName);
 	if (out) {
 		ImageMapStorage::StorageType storageType = pixelStorage->GetStorageType();
 
@@ -630,7 +630,7 @@
 				throw runtime_error("Unsupported storage type in ImageMap::WriteImage(): " + ToString(storageType));
 		}
 
-		delete out;
+		out.reset();
 	} else
 		throw runtime_error("Failed image save: " + fileName);
 }
