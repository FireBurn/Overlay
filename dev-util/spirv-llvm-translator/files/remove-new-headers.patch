From 960f010c98023d29c000e0bab3390140cea731e6 Mon Sep 17 00:00:00 2001
From: Mike Lothian <mike@fireburn.co.uk>
Date: Wed, 5 Mar 2025 14:29:12 +0000
Subject: [PATCH] Revert "Implement
 SPV_INTEL_subgroup_matrix_multiply_accumulate (#2822)"

This reverts commit d1388da8b2148f86a1e924f8f4448cb4cb967e49.

Revert "Implement SPV_INTEL_2d_block_io (#2751)"

This reverts commit 6d6c28aa2c63c224054e9147d81a118faa769ef8.
---
 include/LLVMSPIRVExtensions.inc               |   2 -
 lib/SPIRV/libSPIRV/SPIRVInstruction.h         |  63 ----
 lib/SPIRV/libSPIRV/SPIRVNameMapEnum.h         |   5 -
 lib/SPIRV/libSPIRV/SPIRVOpCodeEnum.h          |   6 -
 spirv-headers-tag.conf                        |   2 +-
 .../2d_block_io_generic.ll                    |  88 ------
 ...roup_matrix_multiply_accumulate_generic.ll | 272 ------------------
 7 files changed, 1 insertion(+), 437 deletions(-)
 delete mode 100644 test/extensions/INTEL/SPV_INTEL_2d_block_io/2d_block_io_generic.ll
 delete mode 100644 test/extensions/INTEL/SPV_INTEL_subgroup_matrix_multiply_accumulate/subgroup_matrix_multiply_accumulate_generic.ll

diff --git a/include/LLVMSPIRVExtensions.inc b/include/LLVMSPIRVExtensions.inc
index e8525906..8f36303d 100644
--- a/include/LLVMSPIRVExtensions.inc
+++ b/include/LLVMSPIRVExtensions.inc
@@ -75,5 +75,3 @@ EXT(SPV_INTEL_subgroup_requirements)
 EXT(SPV_INTEL_task_sequence)
 EXT(SPV_INTEL_maximum_registers)
 EXT(SPV_INTEL_bindless_images)
-EXT(SPV_INTEL_2d_block_io)
-EXT(SPV_INTEL_subgroup_matrix_multiply_accumulate)
diff --git a/lib/SPIRV/libSPIRV/SPIRVInstruction.h b/lib/SPIRV/libSPIRV/SPIRVInstruction.h
index 110fa448..c6b758d0 100644
--- a/lib/SPIRV/libSPIRV/SPIRVInstruction.h
+++ b/lib/SPIRV/libSPIRV/SPIRVInstruction.h
@@ -4384,68 +4384,5 @@ protected:
   std::vector<SPIRVId> CacheTy;
 };
 
-class SPIRVSubgroup2DBlockIOINTELInst : public SPIRVInstTemplateBase {
-public:
-  std::optional<ExtensionID> getRequiredExtension() const override {
-    return ExtensionID::SPV_INTEL_2d_block_io;
-  }
-  SPIRVCapVec getRequiredCapability() const override {
-    return getVec(CapabilitySubgroup2DBlockIOINTEL);
-  }
-};
-
-class SPIRVSubgroup2DBlockLoadTransposeINTELInst
-    : public SPIRVSubgroup2DBlockIOINTELInst {
-  SPIRVCapVec getRequiredCapability() const override {
-    return getVec(CapabilitySubgroup2DBlockTransposeINTEL);
-  }
-};
-
-class SPIRVSubgroup2DBlockLoadTransformINTELInst
-    : public SPIRVSubgroup2DBlockIOINTELInst {
-  SPIRVCapVec getRequiredCapability() const override {
-    return getVec(CapabilitySubgroup2DBlockTransformINTEL);
-  }
-};
-
-#define _SPIRV_OP(x, ...)                                                      \
-  typedef SPIRVInstTemplate<SPIRVSubgroup2DBlockIOINTELInst, Op##x##INTEL,     \
-                            __VA_ARGS__>                                       \
-      SPIRV##x##INTEL;
-_SPIRV_OP(Subgroup2DBlockLoad, false, 11)
-_SPIRV_OP(Subgroup2DBlockPrefetch, false, 10)
-_SPIRV_OP(Subgroup2DBlockStore, false, 11)
-#undef _SPIRV_OP
-#define _SPIRV_OP(x, ...)                                                      \
-  typedef SPIRVInstTemplate<SPIRVSubgroup2DBlockLoadTransposeINTELInst,        \
-                            Op##x##INTEL, __VA_ARGS__>                         \
-      SPIRV##x##INTEL;
-_SPIRV_OP(Subgroup2DBlockLoadTranspose, false, 11)
-#undef _SPIRV_OP
-#define _SPIRV_OP(x, ...)                                                      \
-  typedef SPIRVInstTemplate<SPIRVSubgroup2DBlockLoadTransformINTELInst,        \
-                            Op##x##INTEL, __VA_ARGS__>                         \
-      SPIRV##x##INTEL;
-_SPIRV_OP(Subgroup2DBlockLoadTransform, false, 11)
-#undef _SPIRV_OP
-
-class SPIRVSubgroupMatrixMultiplyAccumulateINTELInst
-    : public SPIRVInstTemplateBase {
-public:
-  std::optional<ExtensionID> getRequiredExtension() const override {
-    return ExtensionID::SPV_INTEL_subgroup_matrix_multiply_accumulate;
-  }
-  SPIRVCapVec getRequiredCapability() const override {
-    return getVec(CapabilitySubgroupMatrixMultiplyAccumulateINTEL);
-  }
-};
-
-#define _SPIRV_OP(x, ...)                                                      \
-  typedef SPIRVInstTemplate<SPIRVSubgroupMatrixMultiplyAccumulateINTELInst,    \
-                            Op##x##INTEL, __VA_ARGS__>                         \
-      SPIRV##x##INTEL;
-_SPIRV_OP(SubgroupMatrixMultiplyAccumulate, true, 7, true, 4)
-#undef _SPIRV_OP
-
 } // namespace SPIRV
 #endif // SPIRV_LIBSPIRV_SPIRVINSTRUCTION_H
diff --git a/lib/SPIRV/libSPIRV/SPIRVNameMapEnum.h b/lib/SPIRV/libSPIRV/SPIRVNameMapEnum.h
index bf3db662..1a0bbe5a 100644
--- a/lib/SPIRV/libSPIRV/SPIRVNameMapEnum.h
+++ b/lib/SPIRV/libSPIRV/SPIRVNameMapEnum.h
@@ -642,11 +642,6 @@ template <> inline void SPIRVMap<Capability, std::string>::init() {
   add(CapabilityFPMaxErrorINTEL, "FPMaxErrorINTEL");
   add(CapabilityRegisterLimitsINTEL, "RegisterLimitsINTEL");
   add(CapabilityArithmeticFenceEXT, "ArithmeticFenceEXT");
-  add(CapabilitySubgroup2DBlockIOINTEL, "Subgroup2DBlockIOINTEL");
-  add(CapabilitySubgroup2DBlockTransformINTEL, "Subgroup2DBlockTransformINTEL");
-  add(CapabilitySubgroup2DBlockTransposeINTEL, "Subgroup2DBlockTransposeINTEL");
-  add(CapabilitySubgroupMatrixMultiplyAccumulateINTEL,
-      "SubgroupMatrixMultiplyAccumulateINTEL");
   // From spirv_internal.hpp
   add(internal::CapabilityFastCompositeINTEL, "FastCompositeINTEL");
   add(internal::CapabilityTokenTypeINTEL, "TokenTypeINTEL");
diff --git a/lib/SPIRV/libSPIRV/SPIRVOpCodeEnum.h b/lib/SPIRV/libSPIRV/SPIRVOpCodeEnum.h
index 99fa18b7..65366d57 100644
--- a/lib/SPIRV/libSPIRV/SPIRVOpCodeEnum.h
+++ b/lib/SPIRV/libSPIRV/SPIRVOpCodeEnum.h
@@ -573,12 +573,6 @@ _SPIRV_OP(ConvertBF16ToFINTEL, 6117)
 _SPIRV_OP(ControlBarrierArriveINTEL, 6142)
 _SPIRV_OP(ControlBarrierWaitINTEL, 6143)
 _SPIRV_OP(ArithmeticFenceEXT, 6145)
-_SPIRV_OP(Subgroup2DBlockLoadINTEL, 6231)
-_SPIRV_OP(Subgroup2DBlockLoadTransformINTEL, 6232)
-_SPIRV_OP(Subgroup2DBlockLoadTransposeINTEL, 6233)
-_SPIRV_OP(Subgroup2DBlockPrefetchINTEL, 6234)
-_SPIRV_OP(Subgroup2DBlockStoreINTEL, 6235)
-_SPIRV_OP(SubgroupMatrixMultiplyAccumulateINTEL, 6237)
 _SPIRV_OP(GroupIMulKHR, 6401)
 _SPIRV_OP(GroupFMulKHR, 6402)
 _SPIRV_OP(GroupBitwiseAndKHR, 6403)
diff --git a/spirv-headers-tag.conf b/spirv-headers-tag.conf
index 0fea890a..066641d4 100644
--- a/spirv-headers-tag.conf
+++ b/spirv-headers-tag.conf
@@ -1 +1 @@
-2b2e05e088841c63c0b6fd4c9fb380d8688738d3
+3f17b2af6784bfa2c5aa5dbb8e0e74a607dd8b3b
diff --git a/test/extensions/INTEL/SPV_INTEL_2d_block_io/2d_block_io_generic.ll b/test/extensions/INTEL/SPV_INTEL_2d_block_io/2d_block_io_generic.ll
deleted file mode 100644
index b14bf071..00000000
--- a/test/extensions/INTEL/SPV_INTEL_2d_block_io/2d_block_io_generic.ll
+++ /dev/null
@@ -1,88 +0,0 @@
-; Generated with:
-; source.cl:
-; void __spirv_Subgroup2DBlockLoadINTEL(         int element_size, int block_width, int block_height, int block_count, const __global void* src_base_pointer, int memory_width,                int memory_height, int memory_pitch,  int2 coordinate,  private void* dst_pointer);
-; void __spirv_Subgroup2DBlockLoadTransposeINTEL(int element_size, int block_width, int block_height, int block_count, const __global void* src_base_pointer, int memory_width,                int memory_height, int memory_pitch,  int2 coordinate,  private void* dst_pointer);
-; void __spirv_Subgroup2DBlockLoadTransformINTEL(int element_size, int block_width, int block_height, int block_count, const __global void* src_base_pointer, int memory_width,                int memory_height, int memory_pitch,  int2 coordinate,  private void* dst_pointer);
-; void __spirv_Subgroup2DBlockPrefetchINTEL(     int element_size, int block_width, int block_height, int block_count, const __global void* src_base_pointer, int memory_width,                int memory_height, int memory_pitch,  int2 coordinate                            );
-; void __spirv_Subgroup2DBlockStoreINTEL(        int element_size, int block_width, int block_height, int block_count, const  private void* src_pointer,      __global void* dst_base_pointer, int memory_width,  int memory_height, int memory_pitch, int2 coordinate          );
-;
-; void foo(const __global void* base_address, __global void* dst_base_pointer, int width, int height, int pitch, int2 coord, private void* dst_pointer, const private void* src_pointer) {
-;     const int i = 42;
-;     __spirv_Subgroup2DBlockLoadINTEL(i, i, i, i, base_address, width, height, pitch, coord, dst_pointer);
-;     __spirv_Subgroup2DBlockLoadTransformINTEL(i, i, i, i, base_address, width, height, pitch, coord, dst_pointer);
-;     __spirv_Subgroup2DBlockLoadTransposeINTEL(i, i, i, i, base_address, width, height, pitch, coord, dst_pointer);
-;     __spirv_Subgroup2DBlockPrefetchINTEL(i, i, i, i, base_address, width, height, pitch, coord);
-;     __spirv_Subgroup2DBlockStoreINTEL(i, i, i, i, src_pointer, dst_base_pointer, width, height, pitch, coord);
-;   }
-; clang -cc1 -cl-std=clc++2021 -triple spir64-unknown-unknown -emit-llvm -finclude-default-header source.cl -o tmp.ll
-
-; RUN: llvm-as %s -o %t.bc
-; RUN: llvm-spirv %t.bc -o %t.spv --spirv-ext=+SPV_INTEL_2d_block_io
-; RUN: llvm-spirv %t.spv -o %t.spt --to-text
-; RUN: FileCheck < %t.spt %s --check-prefix=CHECK-SPIRV
-
-; RUN: llvm-spirv %t.spv -o %t.rev.bc -r --spirv-target-env=SPV-IR
-; RUN: llvm-dis %t.rev.bc -o %t.rev.ll
-; RUN: FileCheck < %t.rev.ll %s --check-prefix=CHECK-LLVM
-
-; RUN: not llvm-spirv %t.bc 2>&1 | FileCheck %s --check-prefix=CHECK-ERROR
-; CHECK-ERROR: RequiresExtension: Feature requires the following SPIR-V extension:
-; CHECK-ERROR-NEXT: SPV_INTEL_2d_block_io
-
-target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
-target triple = "spir64-unknown-unknown"
-
-; CHECK-SPIRV: Capability Subgroup2DBlockIOINTEL
-; CHECK-SPIRV: Capability Subgroup2DBlockTransformINTEL
-; CHECK-SPIRV: Capability Subgroup2DBlockTransposeINTEL
-; CHECK-SPIRV: Extension "SPV_INTEL_2d_block_io"
-; CHECK-SPIRV-DAG: TypeInt [[#Int8Ty:]] 8 0
-; CHECK-SPIRV-DAG: TypeInt [[#Int32Ty:]] 32 0
-; CHECK-SPIRV-DAG: Constant [[#Int32Ty]] [[#Const42:]] 42
-; CHECK-SPIRV-DAG: TypeVoid [[#VoidTy:]]
-; CHECK-SPIRV-DAG: TypePointer [[#GlbPtrTy:]] 5 [[#Int8Ty]]
-; CHECK-SPIRV-DAG: TypeVector [[#VectorTy:]] [[#Int32Ty]] 2
-; CHECK-SPIRV-DAG: TypePointer [[#PrvPtrTy:]] 7 [[#Int8Ty]]
-; CHECK-SPIRV: FunctionParameter [[#GlbPtrTy]] [[#BaseSrc:]]
-; CHECK-SPIRV: FunctionParameter [[#GlbPtrTy]] [[#BaseDst:]]
-; CHECK-SPIRV: FunctionParameter [[#Int32Ty]] [[#Width:]]
-; CHECK-SPIRV: FunctionParameter [[#Int32Ty]] [[#Height:]]
-; CHECK-SPIRV: FunctionParameter [[#Int32Ty]] [[#Pitch:]]
-; CHECK-SPIRV: FunctionParameter [[#VectorTy]] [[#Coord:]]
-; CHECK-SPIRV: FunctionParameter [[#PrvPtrTy]] [[#Dst:]]
-; CHECK-SPIRV: FunctionParameter [[#PrvPtrTy]] [[#Src:]]
-; CHECK-SPIRV: Subgroup2DBlockLoadINTEL [[#Const42]] [[#Const42]] [[#Const42]] [[#Const42]] [[#BaseSrc]] [[#Width]] [[#Height]] [[#Pitch]] [[#Coord]] [[#Dst]]
-; CHECK-SPIRV: Subgroup2DBlockLoadTransformINTEL [[#Const42]] [[#Const42]] [[#Const42]] [[#Const42]] [[#BaseSrc]] [[#Width]] [[#Height]] [[#Pitch]] [[#Coord]] [[#Dst]]
-; CHECK-SPIRV: Subgroup2DBlockLoadTransposeINTEL [[#Const42]] [[#Const42]] [[#Const42]] [[#Const42]] [[#BaseSrc]] [[#Width]] [[#Height]] [[#Pitch]] [[#Coord]] [[#Dst]]
-; CHECK-SPIRV: Subgroup2DBlockPrefetchINTEL [[#Const42]] [[#Const42]] [[#Const42]] [[#Const42]] [[#BaseSrc]] [[#Width]] [[#Height]] [[#Pitch]] [[#Coord]]
-; CHECK-SPIRV: Subgroup2DBlockStoreINTEL [[#Const42]] [[#Const42]] [[#Const42]] [[#Const42]] [[#Src]] [[#BaseDst]] [[#Width]] [[#Height]] [[#Pitch]] [[#Coord]]
-
-; CHECK-LLVM: call spir_func void @_Z32__spirv_Subgroup2DBlockLoadINTELiiiiPU3AS1ciiiDv2_iPc(i32 42, i32 42, i32 42, i32 42, ptr addrspace(1) %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, <2 x i32> %{{.*}}, ptr %{{.*}})
-; CHECK-LLVM: call spir_func void @_Z41__spirv_Subgroup2DBlockLoadTransformINTELiiiiPU3AS1ciiiDv2_iPc(i32 42, i32 42, i32 42, i32 42, ptr addrspace(1) %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, <2 x i32> %{{.*}}, ptr %{{.*}})
-; CHECK-LLVM: call spir_func void @_Z41__spirv_Subgroup2DBlockLoadTransposeINTELiiiiPU3AS1ciiiDv2_iPc(i32 42, i32 42, i32 42, i32 42, ptr addrspace(1) %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, <2 x i32> %{{.*}}, ptr %{{.*}})
-; CHECK-LLVM: call spir_func void @_Z36__spirv_Subgroup2DBlockPrefetchINTELiiiiPU3AS1ciiiDv2_i(i32 42, i32 42, i32 42, i32 42, ptr addrspace(1) %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, <2 x i32> %{{.*}})
-; CHECK-LLVM: call spir_func void @_Z33__spirv_Subgroup2DBlockStoreINTELiiiiPcPU3AS1ciiiDv2_i(i32 42, i32 42, i32 42, i32 42, ptr %{{.*}}, ptr addrspace(1) %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, i32 %{{.*}}, <2 x i32> %{{.*}})
-
-define spir_func void @foo(ptr addrspace(1) %base_address, ptr addrspace(1) %dst_base_pointer, i32 %width, i32 %height, i32 %pitch, <2 x i32> %coord, ptr %dst_pointer, ptr %src_pointer) {
-entry:
-  call spir_func void @_Z32__spirv_Subgroup2DBlockLoadINTELiiiiPU3AS1KviiiDv2_iPv(i32 42, i32 42, i32 42, i32 42, ptr addrspace(1) %base_address, i32 %width, i32 %height, i32 %pitch, <2 x i32> %coord, ptr %dst_pointer)
-  call spir_func void @_Z41__spirv_Subgroup2DBlockLoadTransformINTELiiiiPU3AS1KviiiDv2_iPv(i32 42, i32 42, i32 42, i32 42, ptr addrspace(1) %base_address, i32 %width, i32 %height, i32 %pitch, <2 x i32> %coord, ptr %dst_pointer)
-  call spir_func void @_Z41__spirv_Subgroup2DBlockLoadTransposeINTELiiiiPU3AS1KviiiDv2_iPv(i32 42, i32 42, i32 42, i32 42, ptr addrspace(1) %base_address, i32 %width, i32 %height, i32 %pitch, <2 x i32> %coord, ptr %dst_pointer)
-  call spir_func void @_Z36__spirv_Subgroup2DBlockPrefetchINTELiiiiPU3AS1KviiiDv2_i(i32 42, i32 42, i32 42, i32 42, ptr addrspace(1) %base_address, i32 %width, i32 %height, i32 %pitch, <2 x i32> %coord)
-  call spir_func void @_Z33__spirv_Subgroup2DBlockStoreINTELiiiiPKvPU3AS1viiiDv2_i(i32 42, i32 42, i32 42, i32 42, ptr %src_pointer, ptr addrspace(1) %dst_base_pointer, i32 %width, i32 %height, i32 %pitch, <2 x i32> %coord)
-  ret void
-}
-
-declare spir_func void @_Z32__spirv_Subgroup2DBlockLoadINTELiiiiPU3AS1KviiiDv2_iPv(i32, i32, i32, i32, ptr addrspace(1), i32, i32, i32, <2 x i32>, ptr)
-declare spir_func void @_Z41__spirv_Subgroup2DBlockLoadTransformINTELiiiiPU3AS1KviiiDv2_iPv(i32, i32, i32, i32, ptr addrspace(1), i32, i32, i32, <2 x i32>, ptr)
-declare spir_func void @_Z41__spirv_Subgroup2DBlockLoadTransposeINTELiiiiPU3AS1KviiiDv2_iPv(i32, i32, i32, i32, ptr addrspace(1), i32, i32, i32, <2 x i32>, ptr)
-declare spir_func void @_Z36__spirv_Subgroup2DBlockPrefetchINTELiiiiPU3AS1KviiiDv2_i(i32, i32, i32, i32, ptr addrspace(1), i32, i32, i32, <2 x i32>)
-declare spir_func void @_Z33__spirv_Subgroup2DBlockStoreINTELiiiiPKvPU3AS1viiiDv2_i(i32, i32, i32, i32, ptr, ptr addrspace(1), i32, i32, i32, <2 x i32>)
-
-!opencl.spir.version = !{!0}
-!spirv.Source = !{!1}
-!llvm.ident = !{!2}
-
-!0 = !{i32 1, i32 0}
-!1 = !{i32 4, i32 100000}
-!2 = !{!"clang version 17.0.0"}
diff --git a/test/extensions/INTEL/SPV_INTEL_subgroup_matrix_multiply_accumulate/subgroup_matrix_multiply_accumulate_generic.ll b/test/extensions/INTEL/SPV_INTEL_subgroup_matrix_multiply_accumulate/subgroup_matrix_multiply_accumulate_generic.ll
deleted file mode 100644
index 31e39716..00000000
--- a/test/extensions/INTEL/SPV_INTEL_subgroup_matrix_multiply_accumulate/subgroup_matrix_multiply_accumulate_generic.ll
+++ /dev/null
@@ -1,272 +0,0 @@
-; generated with mma.cl:
-; #pragma OPENCL EXTENSION cl_khr_fp16 : enable
-; 
-; // all combinations of parameter types
-; int  __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, int  Matrix_A, int8 Matrix_B, int  Matrix_C, int Operands);
-; int2 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, int2 Matrix_A, int8 Matrix_B, int2 Matrix_C, int Operands);
-; int4 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, int4 Matrix_A, int8 Matrix_B, int4 Matrix_C, int Operands);
-; int8 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, int8 Matrix_A, int8 Matrix_B, int8 Matrix_C, int Operands);
-; 
-; float  __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, int  Matrix_A, int8 Matrix_B, float  Matrix_C, int Operands);
-; float2 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, int2 Matrix_A, int8 Matrix_B, float2 Matrix_C, int Operands);
-; float4 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, int4 Matrix_A, int8 Matrix_B, float4 Matrix_C, int Operands);
-; float8 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, int8 Matrix_A, int8 Matrix_B, float8 Matrix_C, int Operands);
-; 
-; int  __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short  Matrix_A, int8 Matrix_B, int  Matrix_C, int Operands);
-; int2 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short2 Matrix_A, int8 Matrix_B, int2 Matrix_C, int Operands);
-; int4 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short4 Matrix_A, int8 Matrix_B, int4 Matrix_C, int Operands);
-; int8 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short8 Matrix_A, int8 Matrix_B, int8 Matrix_C, int Operands);
-; 
-; float  __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short  Matrix_A, int8 Matrix_B, float  Matrix_C, int Operands);
-; float2 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short2 Matrix_A, int8 Matrix_B, float2 Matrix_C, int Operands);
-; float4 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short4 Matrix_A, int8 Matrix_B, float4 Matrix_C, int Operands);
-; float8 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short8 Matrix_A, int8 Matrix_B, float8 Matrix_C, int Operands);
-; 
-; half  __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short  Matrix_A, int8 Matrix_B, half  Matrix_C, int Operands);
-; half2 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short2 Matrix_A, int8 Matrix_B, half2 Matrix_C, int Operands);
-; half4 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short4 Matrix_A, int8 Matrix_B, half4 Matrix_C, int Operands);
-; half8 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short8 Matrix_A, int8 Matrix_B, half8 Matrix_C, int Operands);
-; 
-; short  __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short  Matrix_A, int8 Matrix_B, short  Matrix_C, int Operands);
-; short2 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short2 Matrix_A, int8 Matrix_B, short2 Matrix_C, int Operands);
-; short4 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short4 Matrix_A, int8 Matrix_B, short4 Matrix_C, int Operands);
-; short8 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short8 Matrix_A, int8 Matrix_B, short8 Matrix_C, int Operands);
-; 
-; float  __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, float  Matrix_A, float8 Matrix_B, float  Matrix_C, int Operands);
-; float2 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, float2 Matrix_A, float8 Matrix_B, float2 Matrix_C, int Operands);
-; float4 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, float4 Matrix_A, float8 Matrix_B, float4 Matrix_C, int Operands);
-; float8 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, float8 Matrix_A, float8 Matrix_B, float8 Matrix_C, int Operands);
-; 
-; // no operands
-; float4 __spirv_SubgroupMatrixMultiplyAccumulateINTEL(int K_Dim, short4 Matrix_A, int8 Matrix_B, float4 Matrix_C);
-; 
-; void foo(int iM, int2 iM2, int4 iM4, int8 iM8,
-;          short sM, short2 sM2, short4 sM4, short8 sM8,
-;          float fM, float2 fM2, float4 fM4, float8 fM8,
-;          half hM, half2 hM2, half4 hM4, half8 hM8) {
-;     const int i = 42;
-;     int D = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, iM, iM8, iM, 0xA);
-;     int2 D2 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, iM2, iM8, iM2, 0xA);
-;     int4 D4 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, iM4, iM8, iM4, 0xA);
-;     int8 D8 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, iM8, iM8, iM8, 0xA);
-; 
-;     float fD = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, iM, iM8, fM, 0xA);
-;     float2 fD2 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, iM2, iM8, fM2, 0xA);
-;     float4 fD4 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, iM4, iM8, fM4, 0xA);
-;     float8 fD8 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, iM8, iM8, fM8, 0xA);
-; 
-;     int sD = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM, iM8, iM, 0xA);
-;     int2 sD2 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM2, iM8, iM2, 0xA);
-;     int4 sD4 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM4, iM8, iM4, 0xA);
-;     int8 sD8 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM8, iM8, iM8, 0xA);
-; 
-;     float sfD = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM, iM8, fM, 0xA);
-;     float2 sfD2 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM2, iM8, fM2, 0xA);
-;     float4 sfD4 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM4, iM8, fM4, 0xA);
-;     float8 sfD8 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM8, iM8, fM8, 0xA);
-; 
-;     half hD = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM, iM8, hM, 0xA);
-;     half2 hD2 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM2, iM8, hM2, 0xA);
-;     half4 hD4 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM4, iM8, hM4, 0xA);
-;     half8 hD8 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM8, iM8, hM8, 0xA);
-; 
-;     short ssD = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM, iM8, sM, 0xA);
-;     short2 ssD2 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM2, iM8, sM2, 0xA);
-;     short4 ssD4 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM4, iM8, sM4, 0xA);
-;     short8 ssD8 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM8, iM8, sM8, 0xA);
-; 
-;     float ffD = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, fM, fM8, fM, 0xA);
-;     float2 ffD2 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, fM2, fM8, fM2, 0xA);
-;     float4 ffD4 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, fM4, fM8, fM4, 0xA);
-;     float8 ffD8 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, fM8, fM8, fM8, 0xA);
-; 
-;     float4 noOpD4 = __spirv_SubgroupMatrixMultiplyAccumulateINTEL(i, sM4, iM8, fM4);
-; }
-; clang -cc1 -cl-std=clc++2021 -triple spir64-unknown-unknown -emit-llvm -finclude-default-header mma.cl -o tmp.ll
-
-; RUN: llvm-as %s -o %t.bc
-; RUN: llvm-spirv %t.bc -o %t.spv --spirv-ext=+SPV_INTEL_subgroup_matrix_multiply_accumulate
-; RUN: llvm-spirv %t.spv -o %t.spt --to-text
-; RUN: FileCheck < %t.spt %s --check-prefix=CHECK-SPIRV
-
-; RUN: llvm-spirv %t.spv -o %t.rev.bc -r --spirv-target-env=SPV-IR
-; RUN: llvm-dis %t.rev.bc -o %t.rev.ll
-; RUN: FileCheck < %t.rev.ll %s --check-prefix=CHECK-LLVM
-
-; RUN: not llvm-spirv %t.bc 2>&1 | FileCheck %s --check-prefix=CHECK-ERROR
-; CHECK-ERROR: RequiresExtension: Feature requires the following SPIR-V extension:
-; CHECK-ERROR-NEXT: SPV_INTEL_subgroup_matrix_multiply_accumulate
-
-target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
-target triple = "spir64-unknown-unknown"
-
-; CHECK-SPIRV: Capability SubgroupMatrixMultiplyAccumulateINTEL 
-; CHECK-SPIRV: Extension "SPV_INTEL_subgroup_matrix_multiply_accumulate" 
-; CHECK-SPIRV-DAG: TypeInt [[#Int32Ty:]] 32 0
-; CHECK-SPIRV-DAG: TypeInt [[#Int16Ty:]] 16 0
-; CHECK-SPIRV-DAG: Constant [[#Int32Ty]] [[#Const42:]] 42
-; CHECK-SPIRV-DAG: TypeVoid [[#VoidTy:]]
-; CHECK-SPIRV-DAG: TypeVector [[#Vec2Int32Ty:]] [[#Int32Ty]] 2
-; CHECK-SPIRV-DAG: TypeVector [[#Vec4Int32Ty:]] [[#Int32Ty]] 4
-; CHECK-SPIRV-DAG: TypeVector [[#Vec8Int32Ty:]] [[#Int32Ty]] 8
-; CHECK-SPIRV-DAG: TypeVector [[#Vec2Int16Ty:]] [[#Int16Ty]] 2
-; CHECK-SPIRV-DAG: TypeVector [[#Vec4Int16Ty:]] [[#Int16Ty]] 4
-; CHECK-SPIRV-DAG: TypeVector [[#Vec8Int16Ty:]] [[#Int16Ty]] 8
-; CHECK-SPIRV-DAG: TypeFloat [[#FloatTy:]] 32
-; CHECK-SPIRV-DAG: TypeVector [[#Vec2FloatTy:]] [[#FloatTy]] 2
-; CHECK-SPIRV-DAG: TypeVector [[#Vec4FloatTy:]] [[#FloatTy]] 4
-; CHECK-SPIRV-DAG: TypeVector [[#Vec8FloatTy:]] [[#FloatTy]] 8
-; CHECK-SPIRV-DAG: TypeFloat [[#HalfTy:]] 16
-; CHECK-SPIRV-DAG: TypeVector [[#Vec2HalfTy:]] [[#HalfTy]] 2
-; CHECK-SPIRV-DAG: TypeVector [[#Vec4HalfTy:]] [[#HalfTy]] 4
-; CHECK-SPIRV-DAG: TypeVector [[#Vec8HalfTy:]] [[#HalfTy]] 8
-; CHECK-SPIRV: FunctionParameter [[#Int32Ty]] [[#iM:]]
-; CHECK-SPIRV: FunctionParameter [[#Vec2Int32Ty]] [[#iM2:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec4Int32Ty]] [[#iM4:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec8Int32Ty]] [[#iM8:]] 
-; CHECK-SPIRV: FunctionParameter [[#Int16Ty]] [[#sM:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec2Int16Ty]] [[#sM2:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec4Int16Ty]] [[#sM4:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec8Int16Ty]] [[#sM8:]] 
-; CHECK-SPIRV: FunctionParameter [[#FloatTy]] [[#fM:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec2FloatTy]] [[#fM2:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec4FloatTy]] [[#fM4:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec8FloatTy]] [[#fM8:]] 
-; CHECK-SPIRV: FunctionParameter [[#HalfTy]] [[#hM:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec2HalfTy]] [[#hM2:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec4HalfTy]] [[#hM4:]] 
-; CHECK-SPIRV: FunctionParameter [[#Vec8HalfTy]] [[#hM8:]] 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Int32Ty]] [[#Id1:]] [[#Const42]] [[#iM]] [[#iM8]] [[#iM]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec2Int32Ty]] [[#Id1:]] [[#Const42]] [[#iM2]] [[#iM8]] [[#iM2]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec4Int32Ty]] [[#Id1:]] [[#Const42]] [[#iM4]] [[#iM8]] [[#iM4]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec8Int32Ty]] [[#Id1:]] [[#Const42]] [[#iM8]] [[#iM8]] [[#iM8]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#FloatTy]] [[#Id1:]] [[#Const42]] [[#iM]] [[#iM8]] [[#fM]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec2FloatTy]] [[#Id1:]] [[#Const42]] [[#iM2]] [[#iM8]] [[#fM2]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec4FloatTy]] [[#Id1:]] [[#Const42]] [[#iM4]] [[#iM8]] [[#fM4]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec8FloatTy]] [[#Id1:]] [[#Const42]] [[#iM8]] [[#iM8]] [[#fM8]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Int32Ty]] [[#Id1:]] [[#Const42]] [[#sM]] [[#iM8]] [[#iM]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec2Int32Ty]] [[#Id1:]] [[#Const42]] [[#sM2]] [[#iM8]] [[#iM2]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec4Int32Ty]] [[#Id1:]] [[#Const42]] [[#sM4]] [[#iM8]] [[#iM4]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec8Int32Ty]] [[#Id1:]] [[#Const42]] [[#sM8]] [[#iM8]] [[#iM8]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#FloatTy]] [[#Id1:]] [[#Const42]] [[#sM]] [[#iM8]] [[#fM]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec2FloatTy]] [[#Id1:]] [[#Const42]] [[#sM2]] [[#iM8]] [[#fM2]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec4FloatTy]] [[#Id1:]] [[#Const42]] [[#sM4]] [[#iM8]] [[#fM4]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec8FloatTy]] [[#Id1:]] [[#Const42]] [[#sM8]] [[#iM8]] [[#fM8]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#HalfTy]] [[#Id1:]] [[#Const42]] [[#sM]] [[#iM8]] [[#hM]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec2HalfTy]] [[#Id1:]] [[#Const42]] [[#sM2]] [[#iM8]] [[#hM2]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec4HalfTy]] [[#Id1:]] [[#Const42]] [[#sM4]] [[#iM8]] [[#hM4]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec8HalfTy]] [[#Id1:]] [[#Const42]] [[#sM8]] [[#iM8]] [[#hM8]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Int16Ty]] [[#Id1:]] [[#Const42]] [[#sM]] [[#iM8]] [[#sM]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec2Int16Ty]] [[#Id1:]] [[#Const42]] [[#sM2]] [[#iM8]] [[#sM2]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec4Int16Ty]] [[#Id1:]] [[#Const42]] [[#sM4]] [[#iM8]] [[#sM4]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec8Int16Ty]] [[#Id1:]] [[#Const42]] [[#sM8]] [[#iM8]] [[#sM8]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#FloatTy]] [[#Id1:]] [[#Const42]] [[#fM]] [[#fM8]] [[#fM]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec2FloatTy]] [[#Id1:]] [[#Const42]] [[#fM2]] [[#fM8]] [[#fM2]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec4FloatTy]] [[#Id1:]] [[#Const42]] [[#fM4]] [[#fM8]] [[#fM4]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec8FloatTy]] [[#Id1:]] [[#Const42]] [[#fM8]] [[#fM8]] [[#fM8]] 10 
-; CHECK-SPIRV: SubgroupMatrixMultiplyAccumulateINTEL [[#Vec4FloatTy]] [[#Id1:]] [[#Const42]] [[#sM4]] [[#iM8]] [[#fM4]] 
-
-; CHECK-LLVM: %{{.*}} = call spir_func i32 @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiiDv8_iii(i32 42, i32 %{{.*}}, <8 x i32> %{{.*}}, i32 %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <2 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_iDv8_iS_i(i32 42, <2 x i32> %{{.*}}, <8 x i32> %{{.*}}, <2 x i32> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <4 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_iDv8_iS_i(i32 42, <4 x i32> %{{.*}}, <8 x i32> %{{.*}}, <4 x i32> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <8 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_iS_S_i(i32 42, <8 x i32> %{{.*}}, <8 x i32> %{{.*}}, <8 x i32> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func float @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiiDv8_ifi(i32 42, i32 %{{.*}}, <8 x i32> %{{.*}}, float %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <2 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_iDv8_iDv2_fi(i32 42, <2 x i32> %{{.*}}, <8 x i32> %{{.*}}, <2 x float> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_iDv8_iDv4_fi(i32 42, <4 x i32> %{{.*}}, <8 x i32> %{{.*}}, <4 x float> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <8 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_iS_Dv8_fi(i32 42, <8 x i32> %{{.*}}, <8 x i32> %{{.*}}, <8 x float> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func i32 @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_iii(i32 42, i16  %{{.*}}, <8 x i32> %{{.*}}, i32 %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <2 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iDv2_ii(i32 42, <2 x i16> %{{.*}}, <8 x i32> %{{.*}}, <2 x i32> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <4 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_ii(i32 42, <4 x i16> %{{.*}}, <8 x i32> %{{.*}}, <4 x i32> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <8 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iS0_i(i32 42, <8 x i16> %{{.*}}, <8 x i32> %{{.*}}, <8 x i32> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func float @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_ifi(i32 42, i16  %{{.*}}, <8 x i32> %{{.*}}, float %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <2 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iDv2_fi(i32 42, <2 x i16> %{{.*}}, <8 x i32> %{{.*}}, <2 x float> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_fi(i32 42, <4 x i16> %{{.*}}, <8 x i32> %{{.*}}, <4 x float> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <8 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iDv8_fi(i32 42, <8 x i16> %{{.*}}, <8 x i32> %{{.*}}, <8 x float> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func half @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_iDhi(i32 42, i16  %{{.*}}, <8 x i32> %{{.*}}, half %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <2 x half> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iDv2_Dhi(i32 42, <2 x i16> %{{.*}}, <8 x i32> %{{.*}}, <2 x half> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <4 x half> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_Dhi(i32 42, <4 x i16> %{{.*}}, <8 x i32> %{{.*}}, <4 x half> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <8 x half> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iDv8_Dhi(i32 42, <8 x i16> %{{.*}}, <8 x i32> %{{.*}}, <8 x half> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func  i16 @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_isi(i32 42, i16  %{{.*}}, <8 x i32> %{{.*}}, i16  %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <2 x i16> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iS_i(i32 42, <2 x i16> %{{.*}}, <8 x i32> %{{.*}}, <2 x i16> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <4 x i16> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iS_i(i32 42, <4 x i16> %{{.*}}, <8 x i32> %{{.*}}, <4 x i16> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <8 x i16> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iS_i(i32 42, <8 x i16> %{{.*}}, <8 x i32> %{{.*}}, <8 x i16> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func float @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELifDv8_ffi(i32 42, float %{{.*}}, <8 x float> %{{.*}}, float %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <2 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_fDv8_fS_i(i32 42, <2 x float> %{{.*}}, <8 x float> %{{.*}}, <2 x float> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_fDv8_fS_i(i32 42, <4 x float> %{{.*}}, <8 x float> %{{.*}}, <4 x float> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <8 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_fS_S_i(i32 42, <8 x float> %{{.*}}, <8 x float> %{{.*}}, <8 x float> %{{.*}}, i32 10)
-; CHECK-LLVM: %{{.*}} = call spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_f(i32 42, <4 x i16> %{{.*}}, <8 x i32> %{{.*}}, <4 x float> %{{.*}})
-
-define spir_func void @foo(i32 %iM, <2 x i32> %iM2, <4 x i32> %iM4, <8 x i32> %iM8,
-                           i16 signext %sM, <2 x i16> %sM2, <4 x i16> %sM4, <8 x i16> %sM8,
-                           float %fM, <2 x float> %fM2, <4 x float> %fM4, <8 x float> %fM8,
-                           half %hM, <2 x half> %hM2, <4 x half> %hM4, <8 x half> %hM8) {
-entry:
-  %call = call spir_func i32 @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiiDv8_iii(i32 42, i32 %iM, <8 x i32> %iM8, i32 %iM, i32 10)
-  %call1 = call spir_func <2 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_iDv8_iS_i(i32 42, <2 x i32> %iM2, <8 x i32> %iM8, <2 x i32> %iM2, i32 10)
-  %call2 = call spir_func <4 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_iDv8_iS_i(i32 42, <4 x i32> %iM4, <8 x i32> %iM8, <4 x i32> %iM4, i32 10)
-  %call3 = call spir_func <8 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_iS_S_i(i32 42, <8 x i32> %iM8, <8 x i32> %iM8, <8 x i32> %iM8, i32 10)
-  %call4 = call spir_func float @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiiDv8_ifi(i32 42, i32 %iM, <8 x i32> %iM8, float %fM, i32 10)
-  %call5 = call spir_func <2 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_iDv8_iDv2_fi(i32 42, <2 x i32> %iM2, <8 x i32> %iM8, <2 x float> %fM2, i32 10)
-  %call6 = call spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_iDv8_iDv4_fi(i32 42, <4 x i32> %iM4, <8 x i32> %iM8, <4 x float> %fM4, i32 10)
-  %call7 = call spir_func <8 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_iS_Dv8_fi(i32 42, <8 x i32> %iM8, <8 x i32> %iM8, <8 x float> %fM8, i32 10)
-  %call8 = call spir_func i32 @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_iii(i32 42, i16 signext %sM, <8 x i32> %iM8, i32 %iM, i32 10)
-  %call9 = call spir_func <2 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iDv2_ii(i32 42, <2 x i16> %sM2, <8 x i32> %iM8, <2 x i32> %iM2, i32 10)
-  %call10 = call spir_func <4 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_ii(i32 42, <4 x i16> %sM4, <8 x i32> %iM8, <4 x i32> %iM4, i32 10)
-  %call11 = call spir_func <8 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iS0_i(i32 42, <8 x i16> %sM8, <8 x i32> %iM8, <8 x i32> %iM8, i32 10)
-  %call12 = call spir_func float @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_ifi(i32 42, i16 signext %sM, <8 x i32> %iM8, float %fM, i32 10)
-  %call13 = call spir_func <2 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iDv2_fi(i32 42, <2 x i16> %sM2, <8 x i32> %iM8, <2 x float> %fM2, i32 10)
-  %call14 = call spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_fi(i32 42, <4 x i16> %sM4, <8 x i32> %iM8, <4 x float> %fM4, i32 10)
-  %call15 = call spir_func <8 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iDv8_fi(i32 42, <8 x i16> %sM8, <8 x i32> %iM8, <8 x float> %fM8, i32 10)
-  %call16 = call spir_func half @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_iDhi(i32 42, i16 signext %sM, <8 x i32> %iM8, half %hM, i32 10)
-  %call17 = call spir_func <2 x half> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iDv2_Dhi(i32 42, <2 x i16> %sM2, <8 x i32> %iM8, <2 x half> %hM2, i32 10)
-  %call18 = call spir_func <4 x half> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_Dhi(i32 42, <4 x i16> %sM4, <8 x i32> %iM8, <4 x half> %hM4, i32 10)
-  %call19 = call spir_func <8 x half> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iDv8_Dhi(i32 42, <8 x i16> %sM8, <8 x i32> %iM8, <8 x half> %hM8, i32 10)
-  %call20 = call spir_func signext i16 @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_isi(i32 42, i16 signext %sM, <8 x i32> %iM8, i16 signext %sM, i32 10)
-  %call21 = call spir_func <2 x i16> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iS_i(i32 42, <2 x i16> %sM2, <8 x i32> %iM8, <2 x i16> %sM2, i32 10)
-  %call22 = call spir_func <4 x i16> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iS_i(i32 42, <4 x i16> %sM4, <8 x i32> %iM8, <4 x i16> %sM4, i32 10)
-  %call23 = call spir_func <8 x i16> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iS_i(i32 42, <8 x i16> %sM8, <8 x i32> %iM8, <8 x i16> %sM8, i32 10)
-  %call24 = call spir_func float @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELifDv8_ffi(i32 42, float %fM, <8 x float> %fM8, float %fM, i32 10)
-  %call25 = call spir_func <2 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_fDv8_fS_i(i32 42, <2 x float> %fM2, <8 x float> %fM8, <2 x float> %fM2, i32 10)
-  %call26 = call spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_fDv8_fS_i(i32 42, <4 x float> %fM4, <8 x float> %fM8, <4 x float> %fM4, i32 10)
-  %call27 = call spir_func <8 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_fS_S_i(i32 42, <8 x float> %fM8, <8 x float> %fM8, <8 x float> %fM8, i32 10)
-  %call28 = call spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_f(i32 42, <4 x i16> %sM4, <8 x i32> %iM8, <4 x float> %fM4)
-  ret void
-}
-
-declare spir_func i32 @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiiDv8_iii(i32, i32, <8 x i32>, i32, i32)
-declare spir_func <2 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_iDv8_iS_i(i32, <2 x i32>, <8 x i32>, <2 x i32>, i32)
-declare spir_func <4 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_iDv8_iS_i(i32, <4 x i32>, <8 x i32>, <4 x i32>, i32)
-declare spir_func <8 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_iS_S_i(i32, <8 x i32>, <8 x i32>, <8 x i32>, i32)
-declare spir_func float @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiiDv8_ifi(i32, i32, <8 x i32>, float, i32)
-declare spir_func <2 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_iDv8_iDv2_fi(i32, <2 x i32>, <8 x i32>, <2 x float>, i32)
-declare spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_iDv8_iDv4_fi(i32, <4 x i32>, <8 x i32>, <4 x float>, i32)
-declare spir_func <8 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_iS_Dv8_fi(i32, <8 x i32>, <8 x i32>, <8 x float>, i32)
-declare spir_func i32 @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_iii(i32, i16 signext, <8 x i32>, i32, i32)
-declare spir_func <2 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iDv2_ii(i32, <2 x i16>, <8 x i32>, <2 x i32>, i32)
-declare spir_func <4 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_ii(i32, <4 x i16>, <8 x i32>, <4 x i32>, i32)
-declare spir_func <8 x i32> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iS0_i(i32, <8 x i16>, <8 x i32>, <8 x i32>, i32)
-declare spir_func float @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_ifi(i32, i16 signext, <8 x i32>, float, i32)
-declare spir_func <2 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iDv2_fi(i32, <2 x i16>, <8 x i32>, <2 x float>, i32)
-declare spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_fi(i32, <4 x i16>, <8 x i32>, <4 x float>, i32)
-declare spir_func <8 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iDv8_fi(i32, <8 x i16>, <8 x i32>, <8 x float>, i32)
-declare spir_func half @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_iDhi(i32, i16 signext, <8 x i32>, half, i32)
-declare spir_func <2 x half> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iDv2_Dhi(i32, <2 x i16>, <8 x i32>, <2 x half>, i32)
-declare spir_func <4 x half> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_Dhi(i32, <4 x i16>, <8 x i32>, <4 x half>, i32)
-declare spir_func <8 x half> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iDv8_Dhi(i32, <8 x i16>, <8 x i32>, <8 x half>, i32)
-declare spir_func signext i16 @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELisDv8_isi(i32, i16 signext, <8 x i32>, i16 signext, i32)
-declare spir_func <2 x i16> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_sDv8_iS_i(i32, <2 x i16>, <8 x i32>, <2 x i16>, i32)
-declare spir_func <4 x i16> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iS_i(i32, <4 x i16>, <8 x i32>, <4 x i16>, i32)
-declare spir_func <8 x i16> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_sDv8_iS_i(i32, <8 x i16>, <8 x i32>, <8 x i16>, i32)
-declare spir_func float @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELifDv8_ffi(i32, float, <8 x float>, float, i32)
-declare spir_func <2 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv2_fDv8_fS_i(i32, <2 x float>, <8 x float>, <2 x float>, i32)
-declare spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_fDv8_fS_i(i32, <4 x float>, <8 x float>, <4 x float>, i32)
-declare spir_func <8 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv8_fS_S_i(i32, <8 x float>, <8 x float>, <8 x float>, i32)
-declare spir_func <4 x float> @_Z45__spirv_SubgroupMatrixMultiplyAccumulateINTELiDv4_sDv8_iDv4_f(i32, <4 x i16>, <8 x i32>, <4 x float>)
-
-!opencl.spir.version = !{!0}
-!spirv.Source = !{!1}
-!llvm.ident = !{!2}
-
-!0 = !{i32 1, i32 0}
-!1 = !{i32 4, i32 100000}
-!2 = !{!"clang version 17.0.0"}
-- 
2.48.1

