From 5f9ff731bf33bd1f33331f7d5c3a2637e77d23a1 Mon Sep 17 00:00:00 2001
From: Mike Lothian <mike@fireburn.co.uk>
Date: Mon, 6 Jul 2020 17:55:56 +0100
Subject: [PATCH] From fdc08048a3841fde5ee8eb50ffb24ca62f66a741 Mon Sep 17
 00:00:00 2001 From: Tuukka Toivonen <tuukka.toivonen@intel.com> Date: Wed, 06
 May 2020 13:54:04 +0300 Subject: [PATCH] Enable VA-API on Linux for video
 acceleration

This patch enables the usage of Video Acceleration API
(VA-API) on Linux. It requires that the Chrome flags are
set to enable hardware video encoding and decoding
acceleration.

Original patch[1] from Akarshan Biswas which was modified
to disable BufferAllocationMode::kNone on Linux which caused
incompatible frame buffer formats.

[1] https://src.fedoraproject.org/rpms/chromium/blob/master/f/enable-vaapi.patch

Change-Id: I51722b432334dba19a5e7774a1a30c1c09116516
---
 chrome/browser/about_flags.cc                     |  8 ++++----
 chrome/browser/flag_descriptions.cc               | 11 ++++++++---
 chrome/browser/flag_descriptions.h                | 10 ++++++++--
 gpu/config/software_rendering_list.json           |  3 ++-
 media/gpu/vaapi/vaapi_image_processor_backend.cc  |  2 ++
 media/gpu/vaapi/vaapi_video_decode_accelerator.cc |  4 ++++
 6 files changed, 28 insertions(+), 10 deletions(-)

diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index beadf3225b3a..7037fcea720f 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -2361,7 +2361,7 @@ const FeatureEntry kFeatureEntries[] = {
         "disable-accelerated-video-decode",
         flag_descriptions::kAcceleratedVideoDecodeName,
         flag_descriptions::kAcceleratedVideoDecodeDescription,
-        kOsMac | kOsWin | kOsCrOS | kOsAndroid,
+        kOsMac | kOsWin | kOsCrOS | kOsAndroid | kOsLinux,
         SINGLE_DISABLE_VALUE_TYPE(switches::kDisableAcceleratedVideoDecode),
     },
     {
@@ -2808,12 +2808,12 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kWebXrForceRuntimeDescription, kOsDesktop,
      MULTI_VALUE_TYPE(kWebXrForceRuntimeChoices)},
 #endif  // ENABLE_VR
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
     {"disable-accelerated-mjpeg-decode",
      flag_descriptions::kAcceleratedMjpegDecodeName,
-     flag_descriptions::kAcceleratedMjpegDecodeDescription, kOsCrOS,
+     flag_descriptions::kAcceleratedMjpegDecodeDescription, kOsCrOS | kOsLinux,
      SINGLE_DISABLE_VALUE_TYPE(switches::kDisableAcceleratedMjpegDecode)},
-#endif  // OS_CHROMEOS
+#endif  // OS_CHROMEOS | OS_LINUX
     {"system-keyboard-lock", flag_descriptions::kSystemKeyboardLockName,
      flag_descriptions::kSystemKeyboardLockDescription, kOsDesktop,
      FEATURE_VALUE_TYPE(features::kSystemKeyboardLock)},
diff --git a/chrome/browser/flag_descriptions.cc b/chrome/browser/flag_descriptions.cc
index facf860e35aa..0f0427bac0e1 100644
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -3223,16 +3223,21 @@ const char kMetalDescription[] =
 
 #endif
 
-// Chrome OS -------------------------------------------------------------------
-
-#if defined(OS_CHROMEOS)
+// Chrome OS and Linux
+// -------------------------------------------------------------------
 
+#if defined(OS_CHROMEOS) || (defined(OS_LINUX) && !defined(OS_ANDROID))
 const char kAcceleratedMjpegDecodeName[] =
     "Hardware-accelerated mjpeg decode for captured frame";
 const char kAcceleratedMjpegDecodeDescription[] =
     "Enable hardware-accelerated mjpeg decode for captured frame where "
     "available.";
+#endif
 
+// Chrome OS
+// -----------------------------------------------------------------------------
+
+#if defined(OS_CHROMEOS)
 const char kAggregatedMlAppRankingName[] = "Rank suggested apps with ML.";
 const char kAggregatedMlAppRankingDescription[] =
     "Use the aggregated ML model to rank the suggested apps.";
diff --git a/chrome/browser/flag_descriptions.h b/chrome/browser/flag_descriptions.h
index 93fc9cbb7a68..6652ae9ce7b5 100644
--- a/chrome/browser/flag_descriptions.h
+++ b/chrome/browser/flag_descriptions.h
@@ -1863,13 +1863,19 @@ extern const char kMetalDescription[];
 
 #endif  // defined(OS_MACOSX)
 
-// Chrome OS ------------------------------------------------------------------
+// Chrome OS and Linux ---------------------------------------------------------
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || (defined(OS_LINUX) && !defined(OS_ANDROID))
 
 extern const char kAcceleratedMjpegDecodeName[];
 extern const char kAcceleratedMjpegDecodeDescription[];
 
+#endif
+
+// Chrome OS -------------------------------------------------------------------
+
+#if defined(OS_CHROMEOS)
+
 extern const char kAggregatedMlAppRankingName[];
 extern const char kAggregatedMlAppRankingDescription[];
 
diff --git a/gpu/config/software_rendering_list.json b/gpu/config/software_rendering_list.json
index 5b5c542dbc95..add2fed97e82 100644
--- a/gpu/config/software_rendering_list.json
+++ b/gpu/config/software_rendering_list.json
@@ -337,11 +337,12 @@
     },
     {
       "id": 48,
-      "description": "Accelerated video decode is unavailable on Linux",
+      "description": "Accelerated VA-API video decode is not supported on NVIDIA platforms",
       "cr_bugs": [137247, 1032907],
       "os": {
         "type": "linux"
       },
+      "vendor_id": "0x10de",
       "exceptions": [
         {
           "machine_model_name": ["Chromecast"]
diff --git a/media/gpu/vaapi/vaapi_image_processor_backend.cc b/media/gpu/vaapi/vaapi_image_processor_backend.cc
index 3c72d13786b6..02364f68f2c3 100644
--- a/media/gpu/vaapi/vaapi_image_processor_backend.cc
+++ b/media/gpu/vaapi/vaapi_image_processor_backend.cc
@@ -33,6 +33,7 @@ enum class VaIPFailure {
   kMaxValue = kVaapiVppError,
 };
 
+#ifdef OS_CHROMEOS
 void ReportToUMA(base::RepeatingClosure error_cb, VaIPFailure failure) {
   base::UmaHistogramEnumeration("Media.VAIP.VppFailure", failure);
   error_cb.Run();
@@ -66,6 +67,7 @@ bool IsSupported(uint32_t input_va_fourcc,
 
   return true;
 }
+#endif
 
 }  // namespace
 #endif
diff --git a/media/gpu/vaapi/vaapi_video_decode_accelerator.cc b/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
index 63ea51830eed..f37fd01bca1d 100644
--- a/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
+++ b/media/gpu/vaapi/vaapi_video_decode_accelerator.cc
@@ -66,6 +66,7 @@ void ReportToUMA(VAVDADecoderFailure failure) {
                             VAVDA_DECODER_FAILURES_MAX + 1);
 }
 
+#if defined(OS_CHROMEOS)
 // Returns true if the CPU is an Intel Gemini Lake or later (including Kaby
 // Lake) Cpu platform id's are referenced from the following file in kernel
 // source arch/x86/include/asm/intel-family.h
@@ -78,6 +79,7 @@ bool IsGeminiLakeOrLater() {
       cpuid.model() >= kGeminiLakeModelId;
   return is_geminilake_or_later;
 }
+#endif
 
 }  // namespace
 
@@ -1174,6 +1176,7 @@ VaapiVideoDecodeAccelerator::DecideBufferAllocationMode() {
   // associated format reconciliation copy, avoiding all internal buffer
   // allocations.
   // TODO(crbug.com/911754): Enable for VP9 Profile 2.
+#if defined(OS_CHROMEOS)
   if (IsGeminiLakeOrLater() &&
       (profile_ == VP9PROFILE_PROFILE0 || profile_ == VP8PROFILE_ANY ||
        (profile_ >= H264PROFILE_MIN && profile_ <= H264PROFILE_MAX))) {
@@ -1184,6 +1187,7 @@ VaapiVideoDecodeAccelerator::DecideBufferAllocationMode() {
       num_extra_pics_ = 3;
     return BufferAllocationMode::kNone;
   }
+#endif
 
   // For H.264 on older devices, another +1 is experimentally needed for
   // high-to-high resolution changes.
-- 
2.27.0

