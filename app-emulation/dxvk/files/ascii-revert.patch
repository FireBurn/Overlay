From 8c81ad309416bd86a3449f1fcfb400f87e33bdf3 Mon Sep 17 00:00:00 2001
From: Mike Lothian <mike@fireburn.co.uk>
Date: Mon, 28 Sep 2020 16:17:01 +0100
Subject: [PATCH] Revert "Handle non-ASCII characters properly in paths"

This reverts commit bb85a4caa8c48e61d5b698f2718b227678ad180a.
---
 src/d3d11/d3d11_shader.cpp       |  4 ++--
 src/d3d9/d3d9_fixed_function.cpp |  4 ++--
 src/d3d9/d3d9_shader.cpp         |  8 ++++----
 src/dxvk/dxvk_state_cache.cpp    | 12 ++++++------
 src/dxvk/dxvk_state_cache.h      |  4 ++--
 src/util/config/config.cpp       |  2 +-
 src/util/log/log.cpp             |  2 +-
 src/util/util_env.cpp            | 11 ++++-------
 src/util/util_string.cpp         | 16 ----------------
 src/util/util_string.h           |  2 --
 10 files changed, 22 insertions(+), 43 deletions(-)

diff --git a/src/d3d11/d3d11_shader.cpp b/src/d3d11/d3d11_shader.cpp
index 3fe686cf..a5ab47b1 100644
--- a/src/d3d11/d3d11_shader.cpp
+++ b/src/d3d11/d3d11_shader.cpp
@@ -27,7 +27,7 @@ namespace dxvk {
     const std::string dumpPath = env::getEnvVar("DXVK_SHADER_DUMP_PATH");
     
     if (dumpPath.size() != 0) {
-      reader.store(std::ofstream(str::tows(str::format(dumpPath, "/", name, ".dxbc").c_str()).c_str(),
+      reader.store(std::ofstream(str::format(dumpPath, "/", name, ".dxbc"),
         std::ios_base::binary | std::ios_base::trunc));
     }
     
@@ -43,7 +43,7 @@ namespace dxvk {
     
     if (dumpPath.size() != 0) {
       std::ofstream dumpStream(
-        str::tows(str::format(dumpPath, "/", name, ".spv").c_str()).c_str(),
+        str::format(dumpPath, "/", name, ".spv"),
         std::ios_base::binary | std::ios_base::trunc);
       
       m_shader->dump(dumpStream);
diff --git a/src/d3d9/d3d9_fixed_function.cpp b/src/d3d9/d3d9_fixed_function.cpp
index f6ee747d..4c3898d9 100644
--- a/src/d3d9/d3d9_fixed_function.cpp
+++ b/src/d3d9/d3d9_fixed_function.cpp
@@ -2362,7 +2362,7 @@ namespace dxvk {
 
     if (dumpPath.size() != 0) {
       std::ofstream dumpStream(
-        str::tows(str::format(dumpPath, "/", Name, ".spv").c_str()).c_str(),
+        str::format(dumpPath, "/", Name, ".spv"),
         std::ios_base::binary | std::ios_base::trunc);
       
       m_shader->dump(dumpStream);
@@ -2482,4 +2482,4 @@ namespace dxvk {
 
   DxsoIsgn g_ffIsgn = CreateFixedFunctionIsgn();
 
-}
+}
\ No newline at end of file
diff --git a/src/d3d9/d3d9_shader.cpp b/src/d3d9/d3d9_shader.cpp
index d02d4e7a..fc6e8a1f 100644
--- a/src/d3d9/d3d9_shader.cpp
+++ b/src/d3d9/d3d9_shader.cpp
@@ -30,7 +30,7 @@ namespace dxvk {
       DxsoReader reader(
         reinterpret_cast<const char*>(pShaderBytecode));
 
-      reader.store(std::ofstream(str::tows(str::format(dumpPath, "/", name, ".dxso").c_str()).c_str(),
+      reader.store(std::ofstream(str::format(dumpPath, "/", name, ".dxso"),
         std::ios_base::binary | std::ios_base::trunc), bytecodeLength);
 
       char comment[2048];
@@ -42,7 +42,7 @@ namespace dxvk {
         &blob);
       
       if (SUCCEEDED(hr)) {
-        std::ofstream disassembledOut(str::tows(str::format(dumpPath, "/", name, ".dxso.dis").c_str()).c_str(), std::ios_base::binary | std::ios_base::trunc);
+        std::ofstream disassembledOut(str::format(dumpPath, "/", name, ".dxso.dis"), std::ios_base::binary | std::ios_base::trunc);
         disassembledOut.write(
           reinterpret_cast<const char*>(blob->GetBufferPointer()),
           blob->GetBufferSize());
@@ -80,7 +80,7 @@ namespace dxvk {
     
     if (dumpPath.size() != 0) {
       std::ofstream dumpStream(
-        str::tows(str::format(dumpPath, "/", name, ".spv").c_str()).c_str(),
+        str::format(dumpPath, "/", name, ".spv"),
         std::ios_base::binary | std::ios_base::trunc);
       
       m_shaders[0]->dump(dumpStream);
@@ -146,4 +146,4 @@ namespace dxvk {
     }
   }
 
-}
+}
\ No newline at end of file
diff --git a/src/dxvk/dxvk_state_cache.cpp b/src/dxvk/dxvk_state_cache.cpp
index 3c01fa9f..f8ccf65b 100644
--- a/src/dxvk/dxvk_state_cache.cpp
+++ b/src/dxvk/dxvk_state_cache.cpp
@@ -128,12 +128,12 @@ namespace dxvk {
       Logger::warn("DXVK: Creating new state cache file");
 
       // Start with an empty file
-      std::ofstream file(getCacheFileName().c_str(),
+      std::ofstream file(getCacheFileName(),
         std::ios_base::binary |
         std::ios_base::trunc);
 
       if (!file && env::createDirectory(getCacheDir())) {
-        file = std::ofstream(getCacheFileName().c_str(),
+        file = std::ofstream(getCacheFileName(),
           std::ios_base::binary |
           std::ios_base::trunc);
       }
@@ -349,7 +349,7 @@ namespace dxvk {
 
   bool DxvkStateCache::readCacheFile() {
     // Open state file and just fail if it doesn't exist
-    std::ifstream ifile(getCacheFileName().c_str(), std::ios_base::binary);
+    std::ifstream ifile(getCacheFileName(), std::ios_base::binary);
 
     if (!ifile) {
       Logger::warn("DXVK: No state cache file found");
@@ -935,7 +935,7 @@ namespace dxvk {
       }
 
       if (!file) {
-        file = std::ofstream(getCacheFileName().c_str(),
+        file = std::ofstream(getCacheFileName(),
           std::ios_base::binary |
           std::ios_base::app);
       }
@@ -945,7 +945,7 @@ namespace dxvk {
   }
 
 
-  std::wstring DxvkStateCache::getCacheFileName() const {
+  std::string DxvkStateCache::getCacheFileName() const {
     std::string path = getCacheDir();
 
     if (!path.empty() && *path.rbegin() != '/')
@@ -958,7 +958,7 @@ namespace dxvk {
       exeName.erase(extp);
     
     path += exeName + ".dxvk-cache";
-    return str::tows(path.c_str());
+    return path;
   }
 
 
diff --git a/src/dxvk/dxvk_state_cache.h b/src/dxvk/dxvk_state_cache.h
index 28c9868b..f4992e33 100644
--- a/src/dxvk/dxvk_state_cache.h
+++ b/src/dxvk/dxvk_state_cache.h
@@ -176,7 +176,7 @@ namespace dxvk {
 
     void writerFunc();
 
-    std::wstring getCacheFileName() const;
+    std::string getCacheFileName() const;
     
     std::string getCacheDir() const;
 
@@ -191,4 +191,4 @@ namespace dxvk {
 
   };
 
-}
+}
\ No newline at end of file
diff --git a/src/util/config/config.cpp b/src/util/config/config.cpp
index da600f3a..6e614bcf 100644
--- a/src/util/config/config.cpp
+++ b/src/util/config/config.cpp
@@ -609,7 +609,7 @@ namespace dxvk {
       filePath = "dxvk.conf";
     
     // Open the file if it exists
-    std::ifstream stream(str::tows(filePath.c_str()).c_str());
+    std::ifstream stream(filePath);
 
     if (!stream)
       return config;
diff --git a/src/util/log/log.cpp b/src/util/log/log.cpp
index a64a0c31..14b0dc02 100644
--- a/src/util/log/log.cpp
+++ b/src/util/log/log.cpp
@@ -10,7 +10,7 @@ namespace dxvk {
       auto path = getFileName(file_name);
 
       if (!path.empty())
-        m_fileStream = std::ofstream(str::tows(path.c_str()).c_str());
+        m_fileStream = std::ofstream(path);
     }
   }
   
diff --git a/src/util/util_env.cpp b/src/util/util_env.cpp
index 0df61a17..a804de6a 100644
--- a/src/util/util_env.cpp
+++ b/src/util/util_env.cpp
@@ -5,13 +5,10 @@
 namespace dxvk::env {
 
   std::string getEnvVar(const char* name) {
-    std::vector<WCHAR> result;
-    result.resize(MAX_PATH + 1);
-
-    DWORD len = ::GetEnvironmentVariableW(str::tows(name).c_str(), result.data(), MAX_PATH);
-    result.resize(len);
-
-    return str::fromws(result.data());
+    char* result = std::getenv(name);
+    return (result)
+      ? result
+      : "";
   }
   
   
diff --git a/src/util/util_string.cpp b/src/util/util_string.cpp
index 2151c1e4..d19e0db7 100644
--- a/src/util/util_string.cpp
+++ b/src/util/util_string.cpp
@@ -24,20 +24,4 @@ namespace dxvk::str {
       wcs, wcsLen);
   }
 
-  std::wstring tows(const char* mbs) {
-    size_t len = ::MultiByteToWideChar(CP_UTF8,
-      0, mbs, -1, nullptr, 0);
-    
-    if (len <= 1)
-      return L"";
-
-    len -= 1;
-
-    std::wstring result;
-    result.resize(len);
-    ::MultiByteToWideChar(CP_UTF8, 0, mbs, -1,
-      &result.at(0), len);
-    return result;
-  }
-
 }
diff --git a/src/util/util_string.h b/src/util/util_string.h
index cd738477..8bf8802b 100644
--- a/src/util/util_string.h
+++ b/src/util/util_string.h
@@ -16,8 +16,6 @@ namespace dxvk::str {
   void tows(const char* mbs, WCHAR (&wcs)[N]) {
     return tows(mbs, wcs, N);
   }
-
-  std::wstring tows(const char* mbs);
   
   inline void format1(std::stringstream&) { }
 
-- 
2.28.0

