--- tools/clang/docs/AddressSanitizer.rst	2015-06-26 01:36:44.000000000 +0200
+++ tools/clang/docs/AddressSanitizer.rst	2015-08-23 15:35:10.399174574 +0200
@@ -198,7 +198,7 @@
 Some code should not be instrumented by AddressSanitizer. One may use the
 function attribute ``__attribute__((no_sanitize("address")))``
 (which has deprecated synonyms
-:ref:`no_sanitize_address <langext-address_sanitizer>` and
+`no_sanitize_address` and
 `no_address_safety_analysis`) to disable instrumentation of a particular
 function. This attribute may not be supported by other compilers, so we suggest
 to use it together with ``__has_feature(address_sanitizer)``.
--- tools/clang/docs/MemorySanitizer.rst	2015-02-26 16:59:30.000000000 +0100
+++ tools/clang/docs/MemorySanitizer.rst	2015-08-23 15:35:28.002200413 +0200
@@ -82,7 +82,7 @@
 
 Some code should not be checked by MemorySanitizer.
 One may use the function attribute
-:ref:`no_sanitize_memory <langext-memory_sanitizer>`
+`no_sanitize_memory`
 to disable uninitialized checks in a particular function.
 MemorySanitizer may still instrument such functions to avoid false positives.
 This attribute may not be
--- tools/clang/docs/ThreadSanitizer.rst	2015-02-18 23:26:20.000000000 +0100
+++ tools/clang/docs/ThreadSanitizer.rst	2015-08-23 15:34:53.918150364 +0200
@@ -88,7 +88,7 @@
 
 Some code should not be instrumented by ThreadSanitizer.
 One may use the function attribute
-:ref:`no_sanitize_thread <langext-thread_sanitizer>`
+`no_sanitize_thread`
 to disable instrumentation of plain (non-atomic) loads/stores in a particular function.
 ThreadSanitizer still instruments such functions to avoid false positives and
 provide meaningful stack traces.
@@ -102,7 +102,7 @@
 ThreadSanitizer supports ``src`` and ``fun`` entity types in
 :doc:`SanitizerSpecialCaseList`, that can be used to suppress data race reports in
 the specified source files or functions. Unlike functions marked with
-:ref:`no_sanitize_thread <langext-thread_sanitizer>` attribute,
+`no_sanitize_thread` attribute,
 blacklisted functions are not instrumented at all. This can lead to false positives
 due to missed synchronization via atomic operations and missed stack frames in reports.
 
